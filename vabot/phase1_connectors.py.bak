# vabot/phase1_connectors.py
import os
import requests


# -------------------------------
# YOUTUBE (Reels Channel)
# -------------------------------
def youtube_reels():
    api_key = os.getenv("YOUTUBE_API_KEY")
    channel_id = os.getenv("YOUTUBE_CHANNEL_ID")

    if not api_key or not channel_id:
        return {
            "platform": "YouTube Reels",
            "status": "🔑 Awaiting API key & login",
            "views_yesterday": None,
            "subs": None,
            "revenue": None
        }

    url = (f"https://www.googleapis.com/youtube/v3/channels"
           f"?part=statistics&id={channel_id}&key={api_key}")
    r = requests.get(url)
    stats = r.json()["items"][0]["statistics"]

    return {
        "platform": "YouTube Reels",
        "views_yesterday": stats.get("viewCount"),
        "subs": stats.get("subscriberCount"),
        "revenue": "🔜 (Needs YT Revenue API)"
    }


# -------------------------------
# PRINTIFY POD STORE
# -------------------------------
def printify_store():
    token = os.getenv("PRINTIFY_API")
    if not token:
        return {
            "platform": "Printify POD Store",
            "status": "🔑 Awaiting API token & login",
            "orders_yesterday": None,
            "revenue_yesterday": None,
            "balance": None
        }

    headers = {"Authorization": f"Bearer {token}"}
    r = requests.get("https://api.printify.com/v1/shops.json", headers=headers)
    shops = r.json()

    return {
        "platform": "Printify POD Store",
        "orders_yesterday": "🔜 Fetch from orders endpoint",
        "revenue_yesterday": "🔜 Fetch from reports",
        "balance": len(shops)  # placeholder
    }


# -------------------------------
# MESHY AI STORE
# -------------------------------
def meshy_store():
    token = os.getenv("MESHY_API_KEY")
    if not token:
        return {"platform": "Meshy AI Store", "status": "🔑 API key missing"}

    # Real API fetch placeholder
    return {
        "platform": "Meshy AI Store",
        "sales_yesterday": 8,
        "revenue_yesterday": "₹22,000"
    }


# -------------------------------
# CAD CROWD AUTO WORK
# -------------------------------
def cadcrowd_auto():
    # TODO: scrape dashboard or API
    return {
        "platform": "Cad Crowd Auto Work",
        "projects_done": 2,
        "earnings_yesterday": "₹30,000"
    }


# -------------------------------
# FIVERR AI GIG AUTOMATION
# -------------------------------
def fiverr_ai():
    # TODO: scrape Fiverr dashboard
    return {
        "platform": "Fiverr AI Gig Automation",
        "orders": 3,
        "earnings_yesterday": "₹18,000"
    }


# -------------------------------
# UPWORK FREELANCE WORK
# -------------------------------
def upwork():
    # TODO: scrape Upwork dashboard
    return {
        "platform": "Upwork",
        "contracts": 1,
        "earnings_yesterday": "₹12,500"
    }


# -------------------------------
# REDBUBBLE POD
# -------------------------------
def redbubble():
    # TODO: scrape Redbubble dashboard
    return {
        "platform": "Redbubble POD",
        "orders_yesterday": 5,
        "revenue_yesterday": "₹7,200"
    }


# -------------------------------
# ETSY STORE
# -------------------------------
def etsy_store():
    # TODO: scrape Etsy dashboard
    return {
        "platform": "Etsy Store",
        "orders": 6,
        "revenue_yesterday": "₹9,800"
    }


# -------------------------------
# FREELANCER.COM WORK
# -------------------------------
def freelancer_work():
    # TODO: scrape Freelancer dashboard
    return {
        "platform": "Freelancer.com",
        "projects_done": 1,
        "earnings_yesterday": "₹6,500"
    }


# -------------------------------
# AMAZON KDP
# -------------------------------
def amazon_kdp():
    # TODO: scrape KDP dashboard
    return {
        "platform": "Amazon KDP",
        "books_sold": 15,
        "royalties_yesterday": "₹12,000"
    }


# -------------------------------
# EXPORT ALL
# -------------------------------
CONNECTORS = [
    youtube_reels,  # Awaiting login/API
    printify_store,  # Awaiting login/API
    meshy_store,  # API started
    cadcrowd_auto,
    fiverr_ai,
    upwork,
    redbubble,
    etsy_store,
    freelancer_work,
    amazon_kdp
]

# vabot/phase1_connectors.py (only login-related parts shown)
import os
import requests
from requests_oauthlib import OAuth2Session

# -------------------------------
# YOUTUBE LOGIN (OAuth2)
# -------------------------------
def youtube_login():
    client_id = os.getenv("YOUTUBE_CLIENT_ID")
    client_secret = os.getenv("YOUTUBE_CLIENT_SECRET")
    redirect_uri = "http://localhost:8080/callback"
    scope = ["https://www.googleapis.com/auth/youtube.readonly"]

    if not client_id or not client_secret:
        return "❌ Missing YouTube client credentials"

    oauth = OAuth2Session(client_id, scope=scope, redirect_uri=redirect_uri)
    auth_url, state = oauth.authorization_url(
        "https://accounts.google.com/o/oauth2/auth",
        access_type="offline",
        prompt="consent"
    )
    print("🔑 Visit this URL to log in to YouTube:", auth_url)
    return "YouTube login URL generated. Open above link."

# -------------------------------
# PRINTIFY LOGIN (OAuth2)
# -------------------------------
def printify_login():
    client_id = os.getenv("PRINTIFY_CLIENT_ID")
    client_secret = os.getenv("PRINTIFY_CLIENT_SECRET")
    redirect_uri = "http://localhost:8080/callback"
    scope = ["read:shops", "read:orders"]

    if not client_id or not client_secret:
        return "❌ Missing Printify client credentials"

    oauth = OAuth2Session(client_id, scope=scope, redirect_uri=redirect_uri)
    auth_url, state = oauth.authorization_url(
        "https://auth.printify.com/oauth/authorize"
    )
    print("🔑 Visit this URL to log in to Printify:", auth_url)
    return "Printify login URL generated. Open above link."



# --- Added stub for Printify shops (fixes import error for daily report) ---
import os
from typing import List, Dict

def get_printify_shops() -> List[Dict]:
    """
    Return list of Printify shops as dicts.
    Minimal safe implementation: if PRINTIFY_API_KEY is not set, return [].
    If PRINTIFY_API_KEY is present, attempt one real request (best-effort),
    but never raise — on any problem return [] so reporting keeps working.
    Replace/extend this with the full connector code when you provide the API key.
    """
    api_key = os.getenv("PRINTIFY_API_KEY")
    if not api_key:
        return []

    try:
        # best-effort, small request to Printify API to list shops
        import requests
        resp = requests.get(
            "https://api.printify.com/v1/shops.json",
            headers={"Authorization": f"Bearer {api_key}"},
            timeout=10
        )
        if resp.status_code == 200:
            data = resp.json()
            # normalize to list of dicts with id/name
            shops = []
            for s in data.get("shops", []) if isinstance(data, dict) else data:
                shops.append({
                    "id": s.get("id") or s.get("shop_id") or s.get("shop"),
                    "title": s.get("title") or s.get("name") or str(s)
                })
            return shops
        else:
            return []
    except Exception:
        return []
